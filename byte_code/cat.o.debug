Start address = 290
Code lines count = 39 | 0x27
<address> - <hex asm> - <mnemonic>
0000 - 1 ae - v0_input: word v0_handler
0002 - 1 c9 - v1_output: word v1_handler
0020 - 0 0 0 0 0 0 0 0 ...  0 0 0 0 0 0 0 0 - input_buffer: by... 0, 0, 0, 0, 0, 0
0120 - 0 - buffer_tail: byte 0
0121 - 0 - buffer_head: byte 0
0122 - 6 - start: ei
0123 - ff 80 81 40 ff 0 10 - mov byte r1, [0x10]
012a - ff b0 81 ff 0 - cmp byte r1, 0
012f - 42 ff 1 55 - jne start.read
0133 - ff b0 40 ff 1 20 40 ff 1 21 - cmp byte [buffer... ], [buffer_head]
013d - 43 ff 1 23 - jg start.wait_in
0141 - ff 80 81 40 ff 0 12 - mov byte r1, [0x12]
0148 - ff b0 81 ff 0 - cmp byte r1, 0
014d - 42 ff 1 77 - jne start.write
0151 - 40 ff 1 ad - jmp exit
0155 - 52 ff 0 0 - int 0
0159 - ff 80 81 40 ff 1 21 - mov byte r1, [buffer_head]
0160 - ff 62 40 ff 1 21 - inc byte [buffer_head]
0166 - ff b0 41 ff 0 20 81 ff 0 - cmp byte [input_buffer+r1], 0
016f - 41 ff 1 33 - jz start.wait_out
0173 - 40 ff 1 33 - jmp start.wait_out
0177 - ff 80 81 40 ff 1 20 - mov byte r1, [buffer_tail]
017e - ff b0 41 ff 0 20 81 ff 0 - cmp byte [input_buffer+r1], 0
0187 - 41 ff 1 ad - jz exit
018b - 52 ff 0 1 - int 1
018f - ff 80 81 40 ff 1 20 - mov byte r1, [buffer_tail]
0196 - ff 62 40 ff 1 20 - inc byte [buffer_tail]
019c - ff b0 41 ff 0 20 81 ff 0 - cmp byte [input_buffer+r1], 0
01a5 - 41 ff 1 ad - jz exit
01a9 - 40 ff 1 23 - jmp start.wait_in
01ad - 1 - halt
01ae - ff 80 81 40 ff 1 21 - mov byte r1, [buffer_head]
01b5 - ff 80 41 ff 0 20 81 40 ff 0 11 - mov byte [input_... ffer+r1], [0x11]
01c0 - ff 80 40 ff 0 10 ff 0 - mov byte [0x10], 0
01c8 - 9 - iret
01c9 - ff 80 81 40 ff 1 20 - mov byte r1, [buffer_tail]
01d0 - ff 80 40 ff 0 13 41 ff 0 20 81 - mov byte [0x13],... input_buffer+r1]
01db - ff 80 40 ff 0 12 ff 0 - mov byte [0x12], 0
01e3 - 9 - iret