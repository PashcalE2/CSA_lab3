org 0
v0_input: word v0_handler
v1_output: word v1_handler

org 0x20
input_buffer: byte 256 dup(0)
buffer_tail: byte 0
buffer_head: byte 0
hello_prefix: byte 'Hello, ', 0
hello_postfix: byte '!', 0

start: ei
.wait_in:
    mov byte r1, [0x10]
    cmp byte r1, 0
    jne start.read ; i ready
    ; i is not ready, check out
.wait_out:
    cmp byte [buffer_tail], [buffer_head] ; can read from buffer ?
    jg start.wait_in

    mov byte r1, [0x12]
    cmp byte r1, 0
    jne start.write ; o ready
    jmp exit

.read:
    int 0
    mov byte r1, [buffer_head]
    inc byte [buffer_head]
    cmp byte [input_buffer+r1], 0 ; read 0
    jz start.wait_out ; in is over
    jmp start.wait_out

.write:
    mov byte r1, [buffer_tail] ; where our char
    cmp byte [input_buffer+r1], 0
    jz exit

    int 1
    mov byte r1, [buffer_tail] ;
    inc byte [buffer_tail] ; next is
    cmp byte [input_buffer+r1], 0 ; wrote 0
    jz exit
    jmp start.wait_in

exit:
    halt

v0_handler:
    mov byte r1, [buffer_head] ; where to save
    mov byte [input_buffer+r1], [0x11] ; save to buffer
    mov byte [0x10], 0
    iret

v1_handler:
    mov byte r1, [buffer_tail] ; where our char
    mov byte [0x13], [input_buffer+r1] ; write to out
    mov byte [0x12], 0
    iret

