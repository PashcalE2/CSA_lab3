Start address = 298
Code lines count = 47 | 0x2f
<address> - <hex asm> - <mnemonic>
0000 - 1 8a - v0_input: word read_handler
0002 - 1 cf - v1_output: word cat_handler
0020 - 68 65 6c 6c 6f 2c 20 0 - msg1: byte 'hello, ', 0
0028 - 21 0 - msg2: byte '!', 0
002a - 0 0 0 0 0 0 0 0 ...  0 0 0 0 0 0 0 0 - msg3: byte 0, 0,... 0, 0, 0, 0, 0, 0
012a - 6 - ei
012b - 50 ff 0 20 - push msg1
012f - 51 ff 1 9c - call cat
0133 - 71 81 - pop r1
0135 - 50 ff 0 2a - push msg3
0139 - 51 ff 1 54 - call read_str
013d - 71 81 - pop r1
013f - 50 ff 0 2a - push msg3
0143 - 51 ff 1 9c - call cat
0147 - 71 81 - pop r1
0149 - 50 ff 0 28 - push msg2
014d - 51 ff 1 9c - call cat
0151 - 71 81 - pop r1
0153 - 1 - halt
0154 - 80 84 41 80 ff 0 2 - mov r4, [sp+2]
015b - ff 80 85 ff 0 - mov byte r5, 0
0160 - ff 80 81 40 ff 0 10 - mov byte r1, [0x10]
0167 - ff b0 81 ff 0 - cmp byte r1, 0
016c - 42 ff 1 74 - jne read_str.read
0170 - 40 ff 1 60 - jmp read_str.wait_in
0174 - 52 ff 0 0 - int 0
0178 - ff 62 85 - inc byte r5
017b - ff b0 4f 84 85 ff 0 1 ff 0 - cmp byte [r4+r5*1-1], 0
0185 - 42 ff 1 60 - jnz read_str.wait_in
0189 - 8 - ret
018a - ff 80 41 84 85 40 ff 0 11 - mov byte [r4+r5], [0x11]
0193 - ff 80 40 ff 0 10 ff 0 - mov byte [0x10], 0
019b - 9 - iret
019c - 80 83 41 80 ff 0 2 - mov r3, [sp+2]
01a3 - ff 80 82 ff 0 - mov byte r2, 0
01a8 - ff 80 81 40 ff 0 12 - mov byte r1, [0x12]
01af - ff b0 81 ff 0 - cmp byte r1, 0
01b4 - 42 ff 1 bc - jne cat.int
01b8 - 40 ff 1 a8 - jmp cat.wait
01bc - 52 ff 0 1 - int 1
01c0 - ff b0 4f 83 82 ff 0 1 ff 0 - cmp byte [r3+r2*1-1], 0
01ca - 42 ff 1 a8 - jnz cat.wait
01ce - 8 - ret
01cf - ff 80 40 ff 0 12 ff 0 - mov byte [0x12], 0
01d7 - ff 80 40 ff 0 13 41 83 82 - mov byte [0x13], [r3+r2]
01e0 - ff 62 82 - inc byte r2
01e3 - 9 - iret