org 0
v0_input: word write_handler

org 0x20
result_number: dword 0

current: byte 0
output_str: 'Answer: '


org 0x1000
start:
    ei

    call prob2 ; ans in r1

    push dword r1           ; number to save as str
    mov r1, [current]
    add r1, output_str
    push r1                 ; where to save
    call uint_to_str
    pop r1
    pop r1

    push output_str
    call write
    pop r1

    halt

prob2:
    mov dword r7, 4000000 ; limit
    mov dword r6, 0       ; sum
    mov dword r5, 2       ; fib i
    mov dword r4, 1       ; fib i-1
    mov dword r3, 0       ; fib buf
    mov dword r2, 3       ; is_even counter
.loop:
    cmp dword r2, 3
    jnz prob2.calc_next
    add dword r6, r5
    mov dword r2, 0

.calc_next:
    mov dword r3, r5
    add dword r5, r4
    mov dword r4, r3

    cmp dword r5, r7
    jg prob2.ret
    inc dword r2
    jmp prob2.loop
.ret:
    mov dword r1, r6
    ret


uint_to_str:
    mov dword r7, [sp+4]  ; number
    mov r6, [sp+2]        ; string pointer
    mov r5, 0             ; char counter
    push byte 0
.loop:
    mov dword r4, r7
    mod dword r4, 10
    div r7, 10
    add byte r4, '0'
    push byte r4

    cmp dword r7, 0
    jnz uint_to_str.loop

uint_to_str.write:
    pop byte r4
    mov byte [r6+r5], r4
    inc r5
    cmp byte r4, 0
    jnz uint_to_str.write
    ret


add_to_str:
    mov r7, [sp+4] ; add_base
    mov r6, [sp+2] ; additional_base
    mov r5, 0 ; counter

.loop:
    cmp byte [r6+r5], 0
    jz add_to_str.ret
    mov [r7+r5], [r6+r5]
    inc r5
    jmp add_to_str.loop

.ret:
    mov r1, r5
    ret


write:
    mov r7, [sp+2] ; base
    mov r6, 0
.wait:
    mov byte r1, [0x12]
    cmp byte r1, 0
    jne write.int
    jmp write.wait
.int:
    int 0
    cmp byte [r7+r6], 0
    jz write.ret
    inc r6
    jne write.wait

.ret:
    ret

write_handler:
    mov byte [0x13], [r6+r7]
    mov byte [0x12], 0
    iret

